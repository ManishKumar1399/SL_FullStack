Project objective:
As a Full Stack Developer, design and develop a backend administrative portal for the Learner’s Academy. Use the GitHub repository to manage the project artifacts.

Background of the problem statement:
Learner’s Academy is a school that has an online management system. The system keeps track of its classes, subjects, students, and teachers. It has a back-office application with a single administrator login.

The administrator can:

● Set up a master list of all the subjects for all the classes -> Subject
● Set up a master list of all the teachers -> Teacher
● Set up a master list of all the classes -> Class
● Assign classes for subjects from the master list
	Class n : n Subject
● Assign teachers to a class for a subject (A teacher can be assigned to different classes for different subjects)
	Teacher n : n Class
	Teacher 1 : n Subject
● Get a master list of students (Each student must be assigned to a single class)
	Student 1 : 1 Class

There will be an option to view a Class Report which will show all the information about the class, such as the list of students, subjects, and teachers
	Class Report -> UI -> Preferably JSP
		List Students
			-> list of students
		List subjects
			-> list of subjects
		List teachers
			-> list of teachers


UI
-> Learner’s Academy
	-> Login Button
			-> uname : admin and password: admin
			-> Class Report Page
					Classes -> classes.jsp
					Students -> students.jsp
					Subjects -> subjects.jsp
					Teachers -> teachers.jsp


Save all the data manually/from UI also

Login and Logut -> Session
	LoginServlet
	LogoutServlet
	AdminViewServlet
		-> redirectTo -> classes.jsp

Entity
	Class
	Student
	Teacher
	Subject

Servlets


● Set up a master list of all the subjects for all the classes
		-> Subject -> id, name
						-> 1, Java
						-> 2, C++
● Set up a master list of all the teachers
		-> Teacher -> id, name
						-> 1, Raghav
						-> 2, Keshav		
● Set up a master list of all the classes
		-> Class  -> id, className 
						-> 1, Class 1A
						-> 2, Class 1B
						-> 3, Class 2A
● Assign classes for subjects from the master list
			class_subject
				-> id, subjectId, class_id 
● Assign teachers to a class for a subject (A teacher can be assigned to different classes for different subjects)
			teacher_class
				-> id teacherId, classId
● Get a master list of students (Each student must be assigned to a single class)
			Student
				-> id, name, class_id 





